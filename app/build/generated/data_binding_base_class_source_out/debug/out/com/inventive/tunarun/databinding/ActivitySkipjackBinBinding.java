// Generated by view binder compiler. Do not edit!
package com.inventive.tunarun.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.inventive.tunarun.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySkipjackBinBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView captLotNo;

  @NonNull
  public final TextView gotoBlindReceive;

  @NonNull
  public final TextView labelBatchNo;

  @NonNull
  public final TextView labelQueueType;

  @NonNull
  public final TextView labelWeight;

  @NonNull
  public final EditText textBarcode;

  @NonNull
  public final EditText textBatchNo;

  @NonNull
  public final EditText textLotNo;

  @NonNull
  public final EditText textOrigin;

  @NonNull
  public final TextView textQueue;

  @NonNull
  public final TextView textQueueType;

  @NonNull
  public final TextView textResult;

  @NonNull
  public final EditText textSloc;

  @NonNull
  public final EditText textSpecy;

  @NonNull
  public final EditText textSpecyDesc;

  @NonNull
  public final TextView textView19;

  @NonNull
  public final TextView textView20;

  @NonNull
  public final TextView textView21;

  @NonNull
  public final TextView textView22;

  @NonNull
  public final EditText textWeight;

  @NonNull
  public final TextView viewList;

  @NonNull
  public final TextView viewNew;

  @NonNull
  public final TextView viewRun;

  @NonNull
  public final TextView viewShift;

  private ActivitySkipjackBinBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView captLotNo, @NonNull TextView gotoBlindReceive,
      @NonNull TextView labelBatchNo, @NonNull TextView labelQueueType,
      @NonNull TextView labelWeight, @NonNull EditText textBarcode, @NonNull EditText textBatchNo,
      @NonNull EditText textLotNo, @NonNull EditText textOrigin, @NonNull TextView textQueue,
      @NonNull TextView textQueueType, @NonNull TextView textResult, @NonNull EditText textSloc,
      @NonNull EditText textSpecy, @NonNull EditText textSpecyDesc, @NonNull TextView textView19,
      @NonNull TextView textView20, @NonNull TextView textView21, @NonNull TextView textView22,
      @NonNull EditText textWeight, @NonNull TextView viewList, @NonNull TextView viewNew,
      @NonNull TextView viewRun, @NonNull TextView viewShift) {
    this.rootView = rootView;
    this.captLotNo = captLotNo;
    this.gotoBlindReceive = gotoBlindReceive;
    this.labelBatchNo = labelBatchNo;
    this.labelQueueType = labelQueueType;
    this.labelWeight = labelWeight;
    this.textBarcode = textBarcode;
    this.textBatchNo = textBatchNo;
    this.textLotNo = textLotNo;
    this.textOrigin = textOrigin;
    this.textQueue = textQueue;
    this.textQueueType = textQueueType;
    this.textResult = textResult;
    this.textSloc = textSloc;
    this.textSpecy = textSpecy;
    this.textSpecyDesc = textSpecyDesc;
    this.textView19 = textView19;
    this.textView20 = textView20;
    this.textView21 = textView21;
    this.textView22 = textView22;
    this.textWeight = textWeight;
    this.viewList = viewList;
    this.viewNew = viewNew;
    this.viewRun = viewRun;
    this.viewShift = viewShift;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySkipjackBinBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySkipjackBinBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_skipjack_bin, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySkipjackBinBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.capt_lotNo;
      TextView captLotNo = ViewBindings.findChildViewById(rootView, id);
      if (captLotNo == null) {
        break missingId;
      }

      id = R.id.goto_blindReceive;
      TextView gotoBlindReceive = ViewBindings.findChildViewById(rootView, id);
      if (gotoBlindReceive == null) {
        break missingId;
      }

      id = R.id.labelBatchNo;
      TextView labelBatchNo = ViewBindings.findChildViewById(rootView, id);
      if (labelBatchNo == null) {
        break missingId;
      }

      id = R.id.labelQueueType;
      TextView labelQueueType = ViewBindings.findChildViewById(rootView, id);
      if (labelQueueType == null) {
        break missingId;
      }

      id = R.id.labelWeight;
      TextView labelWeight = ViewBindings.findChildViewById(rootView, id);
      if (labelWeight == null) {
        break missingId;
      }

      id = R.id.text_barcode;
      EditText textBarcode = ViewBindings.findChildViewById(rootView, id);
      if (textBarcode == null) {
        break missingId;
      }

      id = R.id.text_batchNo;
      EditText textBatchNo = ViewBindings.findChildViewById(rootView, id);
      if (textBatchNo == null) {
        break missingId;
      }

      id = R.id.text_lotNo;
      EditText textLotNo = ViewBindings.findChildViewById(rootView, id);
      if (textLotNo == null) {
        break missingId;
      }

      id = R.id.text_origin;
      EditText textOrigin = ViewBindings.findChildViewById(rootView, id);
      if (textOrigin == null) {
        break missingId;
      }

      id = R.id.text_queue;
      TextView textQueue = ViewBindings.findChildViewById(rootView, id);
      if (textQueue == null) {
        break missingId;
      }

      id = R.id.text_queueType;
      TextView textQueueType = ViewBindings.findChildViewById(rootView, id);
      if (textQueueType == null) {
        break missingId;
      }

      id = R.id.text_result;
      TextView textResult = ViewBindings.findChildViewById(rootView, id);
      if (textResult == null) {
        break missingId;
      }

      id = R.id.text_sloc;
      EditText textSloc = ViewBindings.findChildViewById(rootView, id);
      if (textSloc == null) {
        break missingId;
      }

      id = R.id.text_specy;
      EditText textSpecy = ViewBindings.findChildViewById(rootView, id);
      if (textSpecy == null) {
        break missingId;
      }

      id = R.id.text_specyDesc;
      EditText textSpecyDesc = ViewBindings.findChildViewById(rootView, id);
      if (textSpecyDesc == null) {
        break missingId;
      }

      id = R.id.textView19;
      TextView textView19 = ViewBindings.findChildViewById(rootView, id);
      if (textView19 == null) {
        break missingId;
      }

      id = R.id.textView20;
      TextView textView20 = ViewBindings.findChildViewById(rootView, id);
      if (textView20 == null) {
        break missingId;
      }

      id = R.id.textView21;
      TextView textView21 = ViewBindings.findChildViewById(rootView, id);
      if (textView21 == null) {
        break missingId;
      }

      id = R.id.textView22;
      TextView textView22 = ViewBindings.findChildViewById(rootView, id);
      if (textView22 == null) {
        break missingId;
      }

      id = R.id.text_weight;
      EditText textWeight = ViewBindings.findChildViewById(rootView, id);
      if (textWeight == null) {
        break missingId;
      }

      id = R.id.view_list;
      TextView viewList = ViewBindings.findChildViewById(rootView, id);
      if (viewList == null) {
        break missingId;
      }

      id = R.id.view_new;
      TextView viewNew = ViewBindings.findChildViewById(rootView, id);
      if (viewNew == null) {
        break missingId;
      }

      id = R.id.view_run;
      TextView viewRun = ViewBindings.findChildViewById(rootView, id);
      if (viewRun == null) {
        break missingId;
      }

      id = R.id.view_shift;
      TextView viewShift = ViewBindings.findChildViewById(rootView, id);
      if (viewShift == null) {
        break missingId;
      }

      return new ActivitySkipjackBinBinding((ConstraintLayout) rootView, captLotNo,
          gotoBlindReceive, labelBatchNo, labelQueueType, labelWeight, textBarcode, textBatchNo,
          textLotNo, textOrigin, textQueue, textQueueType, textResult, textSloc, textSpecy,
          textSpecyDesc, textView19, textView20, textView21, textView22, textWeight, viewList,
          viewNew, viewRun, viewShift);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
