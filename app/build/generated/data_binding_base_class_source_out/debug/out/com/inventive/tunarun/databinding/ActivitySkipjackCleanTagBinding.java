// Generated by view binder compiler. Do not edit!
package com.inventive.tunarun.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.inventive.tunarun.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySkipjackCleanTagBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView actnDs;

  @NonNull
  public final TextView actnPm;

  @NonNull
  public final TextView actnPush;

  @NonNull
  public final TextView captBatchCook;

  @NonNull
  public final TextView captCleanLn;

  @NonNull
  public final TextView captFracPick;

  @NonNull
  public final TextView captRackNo;

  @NonNull
  public final TextView captRackNum;

  @NonNull
  public final TextView captScanned;

  @NonNull
  public final TextView captSkinLn;

  @NonNull
  public final TextView captTrayPick;

  @NonNull
  public final CheckBox checkBox;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final EditText textBarcode;

  @NonNull
  public final EditText textBatchGroup;

  @NonNull
  public final EditText textCleanLine;

  @NonNull
  public final EditText textEachPick;

  @NonNull
  public final EditText textSkinLine;

  @NonNull
  public final EditText textTrayPick;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView viewCookNo;

  @NonNull
  public final TextView viewEachCount;

  @NonNull
  public final TextView viewEachUsed;

  @NonNull
  public final TextView viewRackNo;

  @NonNull
  public final TextView viewRackNum;

  @NonNull
  public final TextView viewRemark;

  @NonNull
  public final TextView viewTrayCount;

  @NonNull
  public final TextView viewTrayUsed;

  private ActivitySkipjackCleanTagBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView actnDs, @NonNull TextView actnPm, @NonNull TextView actnPush,
      @NonNull TextView captBatchCook, @NonNull TextView captCleanLn,
      @NonNull TextView captFracPick, @NonNull TextView captRackNo, @NonNull TextView captRackNum,
      @NonNull TextView captScanned, @NonNull TextView captSkinLn, @NonNull TextView captTrayPick,
      @NonNull CheckBox checkBox, @NonNull ConstraintLayout main, @NonNull EditText textBarcode,
      @NonNull EditText textBatchGroup, @NonNull EditText textCleanLine,
      @NonNull EditText textEachPick, @NonNull EditText textSkinLine,
      @NonNull EditText textTrayPick, @NonNull TextView textView, @NonNull TextView viewCookNo,
      @NonNull TextView viewEachCount, @NonNull TextView viewEachUsed, @NonNull TextView viewRackNo,
      @NonNull TextView viewRackNum, @NonNull TextView viewRemark, @NonNull TextView viewTrayCount,
      @NonNull TextView viewTrayUsed) {
    this.rootView = rootView;
    this.actnDs = actnDs;
    this.actnPm = actnPm;
    this.actnPush = actnPush;
    this.captBatchCook = captBatchCook;
    this.captCleanLn = captCleanLn;
    this.captFracPick = captFracPick;
    this.captRackNo = captRackNo;
    this.captRackNum = captRackNum;
    this.captScanned = captScanned;
    this.captSkinLn = captSkinLn;
    this.captTrayPick = captTrayPick;
    this.checkBox = checkBox;
    this.main = main;
    this.textBarcode = textBarcode;
    this.textBatchGroup = textBatchGroup;
    this.textCleanLine = textCleanLine;
    this.textEachPick = textEachPick;
    this.textSkinLine = textSkinLine;
    this.textTrayPick = textTrayPick;
    this.textView = textView;
    this.viewCookNo = viewCookNo;
    this.viewEachCount = viewEachCount;
    this.viewEachUsed = viewEachUsed;
    this.viewRackNo = viewRackNo;
    this.viewRackNum = viewRackNum;
    this.viewRemark = viewRemark;
    this.viewTrayCount = viewTrayCount;
    this.viewTrayUsed = viewTrayUsed;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySkipjackCleanTagBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySkipjackCleanTagBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_skipjack_clean_tag, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySkipjackCleanTagBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actn_ds;
      TextView actnDs = ViewBindings.findChildViewById(rootView, id);
      if (actnDs == null) {
        break missingId;
      }

      id = R.id.actn_pm;
      TextView actnPm = ViewBindings.findChildViewById(rootView, id);
      if (actnPm == null) {
        break missingId;
      }

      id = R.id.actn_push;
      TextView actnPush = ViewBindings.findChildViewById(rootView, id);
      if (actnPush == null) {
        break missingId;
      }

      id = R.id.capt_batchCook;
      TextView captBatchCook = ViewBindings.findChildViewById(rootView, id);
      if (captBatchCook == null) {
        break missingId;
      }

      id = R.id.capt_cleanLn;
      TextView captCleanLn = ViewBindings.findChildViewById(rootView, id);
      if (captCleanLn == null) {
        break missingId;
      }

      id = R.id.capt_fracPick;
      TextView captFracPick = ViewBindings.findChildViewById(rootView, id);
      if (captFracPick == null) {
        break missingId;
      }

      id = R.id.capt_rackNo;
      TextView captRackNo = ViewBindings.findChildViewById(rootView, id);
      if (captRackNo == null) {
        break missingId;
      }

      id = R.id.capt_rackNum;
      TextView captRackNum = ViewBindings.findChildViewById(rootView, id);
      if (captRackNum == null) {
        break missingId;
      }

      id = R.id.capt_scanned;
      TextView captScanned = ViewBindings.findChildViewById(rootView, id);
      if (captScanned == null) {
        break missingId;
      }

      id = R.id.capt_skinLn;
      TextView captSkinLn = ViewBindings.findChildViewById(rootView, id);
      if (captSkinLn == null) {
        break missingId;
      }

      id = R.id.capt_trayPick;
      TextView captTrayPick = ViewBindings.findChildViewById(rootView, id);
      if (captTrayPick == null) {
        break missingId;
      }

      id = R.id.checkBox;
      CheckBox checkBox = ViewBindings.findChildViewById(rootView, id);
      if (checkBox == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.text_barcode;
      EditText textBarcode = ViewBindings.findChildViewById(rootView, id);
      if (textBarcode == null) {
        break missingId;
      }

      id = R.id.text_batchGroup;
      EditText textBatchGroup = ViewBindings.findChildViewById(rootView, id);
      if (textBatchGroup == null) {
        break missingId;
      }

      id = R.id.text_cleanLine;
      EditText textCleanLine = ViewBindings.findChildViewById(rootView, id);
      if (textCleanLine == null) {
        break missingId;
      }

      id = R.id.text_eachPick;
      EditText textEachPick = ViewBindings.findChildViewById(rootView, id);
      if (textEachPick == null) {
        break missingId;
      }

      id = R.id.text_skinLine;
      EditText textSkinLine = ViewBindings.findChildViewById(rootView, id);
      if (textSkinLine == null) {
        break missingId;
      }

      id = R.id.text_trayPick;
      EditText textTrayPick = ViewBindings.findChildViewById(rootView, id);
      if (textTrayPick == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.view_cookNo;
      TextView viewCookNo = ViewBindings.findChildViewById(rootView, id);
      if (viewCookNo == null) {
        break missingId;
      }

      id = R.id.view_eachCount;
      TextView viewEachCount = ViewBindings.findChildViewById(rootView, id);
      if (viewEachCount == null) {
        break missingId;
      }

      id = R.id.view_eachUsed;
      TextView viewEachUsed = ViewBindings.findChildViewById(rootView, id);
      if (viewEachUsed == null) {
        break missingId;
      }

      id = R.id.view_rackNo;
      TextView viewRackNo = ViewBindings.findChildViewById(rootView, id);
      if (viewRackNo == null) {
        break missingId;
      }

      id = R.id.view_rackNum;
      TextView viewRackNum = ViewBindings.findChildViewById(rootView, id);
      if (viewRackNum == null) {
        break missingId;
      }

      id = R.id.view_remark;
      TextView viewRemark = ViewBindings.findChildViewById(rootView, id);
      if (viewRemark == null) {
        break missingId;
      }

      id = R.id.view_trayCount;
      TextView viewTrayCount = ViewBindings.findChildViewById(rootView, id);
      if (viewTrayCount == null) {
        break missingId;
      }

      id = R.id.view_trayUsed;
      TextView viewTrayUsed = ViewBindings.findChildViewById(rootView, id);
      if (viewTrayUsed == null) {
        break missingId;
      }

      return new ActivitySkipjackCleanTagBinding((ConstraintLayout) rootView, actnDs, actnPm,
          actnPush, captBatchCook, captCleanLn, captFracPick, captRackNo, captRackNum, captScanned,
          captSkinLn, captTrayPick, checkBox, main, textBarcode, textBatchGroup, textCleanLine,
          textEachPick, textSkinLine, textTrayPick, textView, viewCookNo, viewEachCount,
          viewEachUsed, viewRackNo, viewRackNum, viewRemark, viewTrayCount, viewTrayUsed);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
