// Generated by view binder compiler. Do not edit!
package com.inventive.tunarun.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.inventive.tunarun.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySkipjackWipTagBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView btnNew;

  @NonNull
  public final TextView btnSave;

  @NonNull
  public final TextView capFrac;

  @NonNull
  public final TextView capOrigin;

  @NonNull
  public final TextView capRackNo;

  @NonNull
  public final TextView capSize;

  @NonNull
  public final TextView capSpecy;

  @NonNull
  public final TextView capTray;

  @NonNull
  public final TextView gotoEdit;

  @NonNull
  public final ConstraintLayout layoutSkipjackWipTag;

  @NonNull
  public final EditText textFrac;

  @NonNull
  public final EditText textQueueNo;

  @NonNull
  public final EditText textRackNo;

  @NonNull
  public final EditText textTray;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView viewCol;

  @NonNull
  public final TextView viewColor1;

  @NonNull
  public final TextView viewColor2;

  @NonNull
  public final TextView viewColor3;

  @NonNull
  public final TextView viewOrigin;

  @NonNull
  public final TextView viewQueColor;

  @NonNull
  public final TextView viewSize;

  @NonNull
  public final TextView viewSpecy;

  private ActivitySkipjackWipTagBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView btnNew, @NonNull TextView btnSave, @NonNull TextView capFrac,
      @NonNull TextView capOrigin, @NonNull TextView capRackNo, @NonNull TextView capSize,
      @NonNull TextView capSpecy, @NonNull TextView capTray, @NonNull TextView gotoEdit,
      @NonNull ConstraintLayout layoutSkipjackWipTag, @NonNull EditText textFrac,
      @NonNull EditText textQueueNo, @NonNull EditText textRackNo, @NonNull EditText textTray,
      @NonNull TextView textView, @NonNull TextView viewCol, @NonNull TextView viewColor1,
      @NonNull TextView viewColor2, @NonNull TextView viewColor3, @NonNull TextView viewOrigin,
      @NonNull TextView viewQueColor, @NonNull TextView viewSize, @NonNull TextView viewSpecy) {
    this.rootView = rootView;
    this.btnNew = btnNew;
    this.btnSave = btnSave;
    this.capFrac = capFrac;
    this.capOrigin = capOrigin;
    this.capRackNo = capRackNo;
    this.capSize = capSize;
    this.capSpecy = capSpecy;
    this.capTray = capTray;
    this.gotoEdit = gotoEdit;
    this.layoutSkipjackWipTag = layoutSkipjackWipTag;
    this.textFrac = textFrac;
    this.textQueueNo = textQueueNo;
    this.textRackNo = textRackNo;
    this.textTray = textTray;
    this.textView = textView;
    this.viewCol = viewCol;
    this.viewColor1 = viewColor1;
    this.viewColor2 = viewColor2;
    this.viewColor3 = viewColor3;
    this.viewOrigin = viewOrigin;
    this.viewQueColor = viewQueColor;
    this.viewSize = viewSize;
    this.viewSpecy = viewSpecy;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySkipjackWipTagBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySkipjackWipTagBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_skipjack_wip_tag, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySkipjackWipTagBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_new;
      TextView btnNew = ViewBindings.findChildViewById(rootView, id);
      if (btnNew == null) {
        break missingId;
      }

      id = R.id.btn_save;
      TextView btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.cap_frac;
      TextView capFrac = ViewBindings.findChildViewById(rootView, id);
      if (capFrac == null) {
        break missingId;
      }

      id = R.id.cap_origin;
      TextView capOrigin = ViewBindings.findChildViewById(rootView, id);
      if (capOrigin == null) {
        break missingId;
      }

      id = R.id.cap_rackNo;
      TextView capRackNo = ViewBindings.findChildViewById(rootView, id);
      if (capRackNo == null) {
        break missingId;
      }

      id = R.id.cap_size;
      TextView capSize = ViewBindings.findChildViewById(rootView, id);
      if (capSize == null) {
        break missingId;
      }

      id = R.id.cap_specy;
      TextView capSpecy = ViewBindings.findChildViewById(rootView, id);
      if (capSpecy == null) {
        break missingId;
      }

      id = R.id.cap_tray;
      TextView capTray = ViewBindings.findChildViewById(rootView, id);
      if (capTray == null) {
        break missingId;
      }

      id = R.id.goto_edit;
      TextView gotoEdit = ViewBindings.findChildViewById(rootView, id);
      if (gotoEdit == null) {
        break missingId;
      }

      ConstraintLayout layoutSkipjackWipTag = (ConstraintLayout) rootView;

      id = R.id.text_frac;
      EditText textFrac = ViewBindings.findChildViewById(rootView, id);
      if (textFrac == null) {
        break missingId;
      }

      id = R.id.text_queueNo;
      EditText textQueueNo = ViewBindings.findChildViewById(rootView, id);
      if (textQueueNo == null) {
        break missingId;
      }

      id = R.id.text_rackNo;
      EditText textRackNo = ViewBindings.findChildViewById(rootView, id);
      if (textRackNo == null) {
        break missingId;
      }

      id = R.id.text_tray;
      EditText textTray = ViewBindings.findChildViewById(rootView, id);
      if (textTray == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.view_col;
      TextView viewCol = ViewBindings.findChildViewById(rootView, id);
      if (viewCol == null) {
        break missingId;
      }

      id = R.id.view_color1;
      TextView viewColor1 = ViewBindings.findChildViewById(rootView, id);
      if (viewColor1 == null) {
        break missingId;
      }

      id = R.id.view_color2;
      TextView viewColor2 = ViewBindings.findChildViewById(rootView, id);
      if (viewColor2 == null) {
        break missingId;
      }

      id = R.id.view_color3;
      TextView viewColor3 = ViewBindings.findChildViewById(rootView, id);
      if (viewColor3 == null) {
        break missingId;
      }

      id = R.id.view_origin;
      TextView viewOrigin = ViewBindings.findChildViewById(rootView, id);
      if (viewOrigin == null) {
        break missingId;
      }

      id = R.id.view_QueColor;
      TextView viewQueColor = ViewBindings.findChildViewById(rootView, id);
      if (viewQueColor == null) {
        break missingId;
      }

      id = R.id.view_size;
      TextView viewSize = ViewBindings.findChildViewById(rootView, id);
      if (viewSize == null) {
        break missingId;
      }

      id = R.id.view_specy;
      TextView viewSpecy = ViewBindings.findChildViewById(rootView, id);
      if (viewSpecy == null) {
        break missingId;
      }

      return new ActivitySkipjackWipTagBinding((ConstraintLayout) rootView, btnNew, btnSave,
          capFrac, capOrigin, capRackNo, capSize, capSpecy, capTray, gotoEdit, layoutSkipjackWipTag,
          textFrac, textQueueNo, textRackNo, textTray, textView, viewCol, viewColor1, viewColor2,
          viewColor3, viewOrigin, viewQueColor, viewSize, viewSpecy);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
