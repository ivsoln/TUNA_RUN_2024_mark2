// Generated by view binder compiler. Do not edit!
package com.inventive.tunarun.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.inventive.tunarun.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSkipjackQueProductBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView capCustomer;

  @NonNull
  public final TextView capProductType;

  @NonNull
  public final EditText textCustomer;

  @NonNull
  public final EditText textPlanTime;

  private FragmentSkipjackQueProductBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView capCustomer, @NonNull TextView capProductType,
      @NonNull EditText textCustomer, @NonNull EditText textPlanTime) {
    this.rootView = rootView;
    this.capCustomer = capCustomer;
    this.capProductType = capProductType;
    this.textCustomer = textCustomer;
    this.textPlanTime = textPlanTime;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSkipjackQueProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSkipjackQueProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_skipjack_que_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSkipjackQueProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cap_customer;
      TextView capCustomer = ViewBindings.findChildViewById(rootView, id);
      if (capCustomer == null) {
        break missingId;
      }

      id = R.id.cap_productType;
      TextView capProductType = ViewBindings.findChildViewById(rootView, id);
      if (capProductType == null) {
        break missingId;
      }

      id = R.id.text_customer;
      EditText textCustomer = ViewBindings.findChildViewById(rootView, id);
      if (textCustomer == null) {
        break missingId;
      }

      id = R.id.text_PlanTime;
      EditText textPlanTime = ViewBindings.findChildViewById(rootView, id);
      if (textPlanTime == null) {
        break missingId;
      }

      return new FragmentSkipjackQueProductBinding((ConstraintLayout) rootView, capCustomer,
          capProductType, textCustomer, textPlanTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
