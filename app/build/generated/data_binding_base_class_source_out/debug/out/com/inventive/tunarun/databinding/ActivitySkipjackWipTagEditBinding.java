// Generated by view binder compiler. Do not edit!
package com.inventive.tunarun.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.inventive.tunarun.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySkipjackWipTagEditBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView captEach;

  @NonNull
  public final TextView captOrigin;

  @NonNull
  public final TextView captQueNo;

  @NonNull
  public final TextView captRack;

  @NonNull
  public final TextView captScanned;

  @NonNull
  public final TextView captSize;

  @NonNull
  public final TextView captSpecy;

  @NonNull
  public final TextView captTray;

  @NonNull
  public final TextView gotoDelete;

  @NonNull
  public final TextView gotoSave;

  @NonNull
  public final TextView gotoUndo;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final EditText textBarcode;

  @NonNull
  public final EditText textEach;

  @NonNull
  public final EditText textOrigin;

  @NonNull
  public final EditText textQueue;

  @NonNull
  public final EditText textRack;

  @NonNull
  public final EditText textSize;

  @NonNull
  public final EditText textSpecy;

  @NonNull
  public final EditText textTray;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView viewColor1;

  @NonNull
  public final TextView viewColorNew;

  @NonNull
  public final TextView viewEach;

  @NonNull
  public final TextView viewOrigin;

  @NonNull
  public final TextView viewRack;

  @NonNull
  public final TextView viewSize;

  @NonNull
  public final TextView viewSpecy;

  @NonNull
  public final TextView viewTray;

  private ActivitySkipjackWipTagEditBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView captEach, @NonNull TextView captOrigin, @NonNull TextView captQueNo,
      @NonNull TextView captRack, @NonNull TextView captScanned, @NonNull TextView captSize,
      @NonNull TextView captSpecy, @NonNull TextView captTray, @NonNull TextView gotoDelete,
      @NonNull TextView gotoSave, @NonNull TextView gotoUndo, @NonNull ConstraintLayout main,
      @NonNull EditText textBarcode, @NonNull EditText textEach, @NonNull EditText textOrigin,
      @NonNull EditText textQueue, @NonNull EditText textRack, @NonNull EditText textSize,
      @NonNull EditText textSpecy, @NonNull EditText textTray, @NonNull TextView textView,
      @NonNull TextView viewColor1, @NonNull TextView viewColorNew, @NonNull TextView viewEach,
      @NonNull TextView viewOrigin, @NonNull TextView viewRack, @NonNull TextView viewSize,
      @NonNull TextView viewSpecy, @NonNull TextView viewTray) {
    this.rootView = rootView;
    this.captEach = captEach;
    this.captOrigin = captOrigin;
    this.captQueNo = captQueNo;
    this.captRack = captRack;
    this.captScanned = captScanned;
    this.captSize = captSize;
    this.captSpecy = captSpecy;
    this.captTray = captTray;
    this.gotoDelete = gotoDelete;
    this.gotoSave = gotoSave;
    this.gotoUndo = gotoUndo;
    this.main = main;
    this.textBarcode = textBarcode;
    this.textEach = textEach;
    this.textOrigin = textOrigin;
    this.textQueue = textQueue;
    this.textRack = textRack;
    this.textSize = textSize;
    this.textSpecy = textSpecy;
    this.textTray = textTray;
    this.textView = textView;
    this.viewColor1 = viewColor1;
    this.viewColorNew = viewColorNew;
    this.viewEach = viewEach;
    this.viewOrigin = viewOrigin;
    this.viewRack = viewRack;
    this.viewSize = viewSize;
    this.viewSpecy = viewSpecy;
    this.viewTray = viewTray;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySkipjackWipTagEditBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySkipjackWipTagEditBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_skipjack_wip_tag_edit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySkipjackWipTagEditBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.capt_each;
      TextView captEach = ViewBindings.findChildViewById(rootView, id);
      if (captEach == null) {
        break missingId;
      }

      id = R.id.capt_origin;
      TextView captOrigin = ViewBindings.findChildViewById(rootView, id);
      if (captOrigin == null) {
        break missingId;
      }

      id = R.id.capt_queNo;
      TextView captQueNo = ViewBindings.findChildViewById(rootView, id);
      if (captQueNo == null) {
        break missingId;
      }

      id = R.id.capt_rack;
      TextView captRack = ViewBindings.findChildViewById(rootView, id);
      if (captRack == null) {
        break missingId;
      }

      id = R.id.capt_scanned;
      TextView captScanned = ViewBindings.findChildViewById(rootView, id);
      if (captScanned == null) {
        break missingId;
      }

      id = R.id.capt_size;
      TextView captSize = ViewBindings.findChildViewById(rootView, id);
      if (captSize == null) {
        break missingId;
      }

      id = R.id.capt_specy;
      TextView captSpecy = ViewBindings.findChildViewById(rootView, id);
      if (captSpecy == null) {
        break missingId;
      }

      id = R.id.capt_tray;
      TextView captTray = ViewBindings.findChildViewById(rootView, id);
      if (captTray == null) {
        break missingId;
      }

      id = R.id.goto_delete;
      TextView gotoDelete = ViewBindings.findChildViewById(rootView, id);
      if (gotoDelete == null) {
        break missingId;
      }

      id = R.id.goto_save;
      TextView gotoSave = ViewBindings.findChildViewById(rootView, id);
      if (gotoSave == null) {
        break missingId;
      }

      id = R.id.goto_undo;
      TextView gotoUndo = ViewBindings.findChildViewById(rootView, id);
      if (gotoUndo == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.text_barcode;
      EditText textBarcode = ViewBindings.findChildViewById(rootView, id);
      if (textBarcode == null) {
        break missingId;
      }

      id = R.id.text_each;
      EditText textEach = ViewBindings.findChildViewById(rootView, id);
      if (textEach == null) {
        break missingId;
      }

      id = R.id.text_origin;
      EditText textOrigin = ViewBindings.findChildViewById(rootView, id);
      if (textOrigin == null) {
        break missingId;
      }

      id = R.id.text_queue;
      EditText textQueue = ViewBindings.findChildViewById(rootView, id);
      if (textQueue == null) {
        break missingId;
      }

      id = R.id.text_rack;
      EditText textRack = ViewBindings.findChildViewById(rootView, id);
      if (textRack == null) {
        break missingId;
      }

      id = R.id.text_size;
      EditText textSize = ViewBindings.findChildViewById(rootView, id);
      if (textSize == null) {
        break missingId;
      }

      id = R.id.text_specy;
      EditText textSpecy = ViewBindings.findChildViewById(rootView, id);
      if (textSpecy == null) {
        break missingId;
      }

      id = R.id.text_tray;
      EditText textTray = ViewBindings.findChildViewById(rootView, id);
      if (textTray == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.view_color1;
      TextView viewColor1 = ViewBindings.findChildViewById(rootView, id);
      if (viewColor1 == null) {
        break missingId;
      }

      id = R.id.view_colorNew;
      TextView viewColorNew = ViewBindings.findChildViewById(rootView, id);
      if (viewColorNew == null) {
        break missingId;
      }

      id = R.id.view_each;
      TextView viewEach = ViewBindings.findChildViewById(rootView, id);
      if (viewEach == null) {
        break missingId;
      }

      id = R.id.view_origin;
      TextView viewOrigin = ViewBindings.findChildViewById(rootView, id);
      if (viewOrigin == null) {
        break missingId;
      }

      id = R.id.view_rack;
      TextView viewRack = ViewBindings.findChildViewById(rootView, id);
      if (viewRack == null) {
        break missingId;
      }

      id = R.id.view_size;
      TextView viewSize = ViewBindings.findChildViewById(rootView, id);
      if (viewSize == null) {
        break missingId;
      }

      id = R.id.view_specy;
      TextView viewSpecy = ViewBindings.findChildViewById(rootView, id);
      if (viewSpecy == null) {
        break missingId;
      }

      id = R.id.view_tray;
      TextView viewTray = ViewBindings.findChildViewById(rootView, id);
      if (viewTray == null) {
        break missingId;
      }

      return new ActivitySkipjackWipTagEditBinding((ConstraintLayout) rootView, captEach,
          captOrigin, captQueNo, captRack, captScanned, captSize, captSpecy, captTray, gotoDelete,
          gotoSave, gotoUndo, main, textBarcode, textEach, textOrigin, textQueue, textRack,
          textSize, textSpecy, textTray, textView, viewColor1, viewColorNew, viewEach, viewOrigin,
          viewRack, viewSize, viewSpecy, viewTray);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
